plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.abnamro'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	springBootVersion = "2.6.2"
	springFrameworkVersion = "5.5.1"
	testContainersVersion = "1.16.2"
	lombokVersion = "1.18.22"
	mapStructVersion = "1.4.2.Final"
	springDocOpenApiVersion = "1.6.4"
}

dependencies {
	// Spring
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
	developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	testImplementation "org.springframework.security:spring-security-test:${springFrameworkVersion}"

	// Database
	runtimeOnly 'com.h2database:h2:2.0.206'
	runtimeOnly 'mysql:mysql-connector-java:8.0.25'

	// Test Containers
	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
	testImplementation "org.testcontainers:mysql:${testContainersVersion}"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// MapStruct
	implementation "org.mapstruct:mapstruct:${mapStructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

	// Springdoc
	implementation "org.springdoc:springdoc-openapi-ui:${springDocOpenApiVersion}"
	implementation "org.springdoc:springdoc-openapi-data-rest:${springDocOpenApiVersion}"
}

tasks.withType(JavaCompile) {
	options.compilerArgs = [
			'-Amapstruct.defaultComponentModel=spring',
			'-Amapstruct.defaultInjectionStrategy=constructor',
			'-Amapstruct.unmappedTargetPolicy=ERROR'
	]
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
	}
}

test {
	useJUnitPlatform()
}
